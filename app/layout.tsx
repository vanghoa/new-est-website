import './globals.css';
import type { Metadata } from 'next';
import { Work_Sans, Alegreya } from 'next/font/google';
import FirstWebsite from '@/components/FirstWebsite';
import Script from 'next/script';
import Link from 'next/link';

const sans = Work_Sans({
    subsets: ['latin'],
    variable: '--font-sans',
});

const display = Alegreya({
    weight: '700',
    subsets: ['latin'],
    variable: '--font-display',
});

export const metadata: Metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
    formatDetection: {
        email: false,
        address: false,
        telephone: false,
    },
};

const GenerateNestedDivs = ({ levels }: { levels: number }) => (
    <div>
        {levels <= 0 ? (
            <div></div>
        ) : (
            <GenerateNestedDivs levels={levels - 1}></GenerateNestedDivs>
        )}
    </div>
);

const SculpturePiece = ({
    style = {},
    key,
    className = '',
    left = Math.floor(Math.random() * 130 - 30),
    top = Math.floor(Math.random() * 130 - 30),
}: {
    style?: React.CSSProperties;
    key?: string;
    className?: string;
    left?: number;
    top?: number;
}) => (
    <div
        key={key}
        className={`tw-absolute tw-bg-black ${className} tw-w-1/2 tw-h-1/2`}
        style={{
            left: `${left}%`,
            top: `${top}%`,
            ...style,
        }}
    ></div>
);

export default function RootLayout({
    children,
}: {
    children: React.ReactNode;
}) {
    const scultpclass =
        'tw-w-full tw-h-full tw-bg-transparent tw-left-0 tw-top-0';
    return (
        <html
            lang="en"
            className="tw-w-full tw-bg-transparent"
            style={{ height: `calc(100*var(--vh))` }}
        >
            <body
                className={`${sans.variable} ${display.variable} tw-w-full tw-h-full tw-relative tw-bg-transparent`}
            >
                {<FirstWebsite></FirstWebsite>}
                <div
                    className={`${scultpclass} tw-absolute tw-pointer-events-none`}
                >
                    <div className={`${scultpclass} tw-relative`}>
                        {Array.from({ length: 180 }, (_, i) => (
                            <SculpturePiece
                                key={`${i}sculpt`}
                                className="tw-bg-opacity-[0.005]"
                            ></SculpturePiece>
                        ))}
                    </div>
                </div>
                <div
                    className={`${scultpclass} tw-absolute tw-pointer-events-none`}
                >
                    <div className={`${scultpclass} tw-relative`}>
                        <SculpturePiece left={0} top={0}></SculpturePiece>
                        <SculpturePiece left={0} top={33}></SculpturePiece>
                        <SculpturePiece left={33} top={0}></SculpturePiece>
                        <SculpturePiece left={33} top={33}></SculpturePiece>
                        <SculpturePiece left={66} top={33}></SculpturePiece>
                        <SculpturePiece left={33} top={66}></SculpturePiece>
                        <SculpturePiece left={66} top={0}></SculpturePiece>
                        <SculpturePiece left={0} top={66}></SculpturePiece>
                        <SculpturePiece left={66} top={66}></SculpturePiece>
                        {Array.from({ length: 20 }, (_, i) => (
                            <SculpturePiece key={`${i}sculpt`}></SculpturePiece>
                        ))}
                    </div>
                </div>
                <main
                    className={`${scultpclass} tw-relative tw-py-[5vw] tw-px-[10vw]`}
                >
                    <nav></nav>
                </main>
                {<Script src="/base/base.js"></Script>}
            </body>
        </html>
    );
}
